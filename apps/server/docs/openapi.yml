openapi: "3.0.2"
info:
  title: Propel Test API
  version: "1.0"
servers:
  - url: http://localhost:8080/api
paths:
  # auth paths
  /auth/signup:
    post:
      description: User enters their desired credentials, and if username and email are unique, a new account is created. `idle-propel-session` & `absolute-propel-session` cookies are created as well as a new `csrf-token`. Additionally, a `temp_request` is created and a verify account email is sent to the new user's email.
      tags:
        - auth
      security:
        - csrfProtection: []
        - cookiePreAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUp"
      responses:
        "200":
          description: Successfully signed up.
        "400":
          description: All form fields were not filled in.
        "403":
          description: Invalid CSRF
        "409":
          description: User name or email was not unique.
        "500":
          description: Internal server error.
  /auth/signin:
    post:
      description: User enters their credentials and their session is established via `idle-propel-session` & `absolute-propel-session`, a mirror `idle` cookie is created for client side only use for UX, and a new `csrf-token` is generated.
      tags:
        - auth
      security:
        - csrfProtection: []
        - cookiePreAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignIn"
      responses:
        "200":
          description: >
            Successfully signed in.
            Returns an `idle-propel-session` & `absolute-propel-session` which contain a session ID required for all subsequent authenticated requests. Sessions are validated in the `validate-session` middleware.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: absolute-propel-session=s%3Arejjy8saxpDrvoPlxmXQ3A%3D%3D.i00jyHy%2FSdLHOXFZq1%2Bk2Cxks5YasjEz8AjY6tyuKYY; Max-Age=28800; Domain=propel-crm.xyz; Path=/; Expires=Fri, 23 Feb 2024 12:40:21 GMT; HttpOnly; Secure; SameSite=Lax
        "400":
          description: All fields not filled in.
        "401":
          description: Credentials were not correct.
        "403":
          description: Invalid CSRF
        "422":
          description: Invalid request data.
        "429":
          description: Too many requests.
        "500":
          description: Internal server error.
  /auth/signout:
    post:
      description: Signs out an authenticated user. Clears all auth session related cookies, deletes redis persistence via sessionID in cookie, generates a new `csrf-token` and creates a `pre-auth-session` cookie.
      tags:
        - auth
      security:
        - csrfProtection: []
        - cookieIdleAuth: []
        - cookieAbsoluteAuth: []
      responses:
        "200":
          description: Successfully signed up.
        "403":
          description: Invalid CSRF
        "422":
          description: Invalid request parameters.
        "409":
          description: User name or email was not unique.
        "500":
          description: Internal server error.
  /auth/recovery/{id}:
    get:
      summary: Validate temp request by requset ID
      description: Finds temp_request by ID parameter and returns 200 if `temp_request` exists and has not yet expired.
      tags:
        - auth
      security:
        - cookiePreAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Request ID for which to get relevent temp request
          schema:
            type: string
      responses:
        "200":
          description: Request valid
        "400":
          description: ID required
        "401":
          description: Request expired
        "404":
          description: Temp request not found
        "500":
          description: Internal server error
    patch:
      summary: Allows user to make password change if request is valid
      description: For valid temp_request, update user's password by `temp_request.userID`
      tags:
        - auth
      security:
        - csrfProtection: []
          cookiePreAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Request ID for which to get relevent temp request
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFromRecovery"
      responses:
        "200":
          description: Password changed successfully.
        "400":
          description: ID does not exist
        "401":
          description: Request expired || Invalid CSRF
        "404":
          description: Request not found
        "500":
          description: Internal server error
  /auth/recovery:
    post:
      summary: User can request password recovery email
      description: This endpoint is ratelimited via `rateLimitAccountRecovery` middleware
      tags:
        - auth
      security:
        - csrfProtection: []
        - cookiePreAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recovery"
      responses:
        "200":
          description: Returns same message regardless of email existing in db
        "400":
          description: Invalid request body
        "429":
          description: Too many requests
        "500":
          description: Internal Server Error
      x-middleware:
        - rateLimitAccountRecovery
  /auth/verify-email:
    patch:
      description: On client, this is run on page load, when user clicks on link from email. Link would point to `{prodURL}/auth/verify-email?token=token123`
      tags:
        - auth
      parameters:
        - in: query
          name: token
          required: true
          description: temp_request token to verify email by
          schema:
            type: string
      security:
        - cookiePreAuth: []
          csrfProtection: []
        - cookieAbsoluteAuth: []
          cookieIdleAuth: []
          csrfProtection: []
      responses:
        "200":
          description: email verified
        "400":
          description: Token does not exist
        "401":
          description: Invalid CSRF || Request expired
        "500":
          description: Internal server error
  /auth/verify-email/{id}:
    post:
      description: User can request a new email verification email. This request is rate limited via rateLimitAccountVerification
      tags:
        - auth
      security:
        - cookieIdleAuth: []
          cookieAbsoluteAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: user ID
          schema:
            type: string
      responses:
        "200":
          description: New email sent
        "400":
          description: Invalid request data
        "401":
          description: Invalid CSRF
        "403":
          description: Invalid session
        "500":
          description: Internal server error
      x-middleware:
        - rateLimitAccountVerification
  # user paths
  /user/refresh:
    get:
      tags:
        - user
      responses:
        "200":
          description: OK
  /user/me:
    get:
      tags:
        - user
      responses:
        "200":
          description: OK
  /user/{id}:
    patch:
      tags:
        - user
      responses:
        "200":
          description: OK
    delete:
      tags:
        - user
      responses:
        "200":
          description: OK
  # analytics paths
  /analytics/sales/{id}:
    get:
      tags:
        - analytics
      responses:
        "200":
          description: Found data
  /analytics/years/{id}:
    get:
      tags:
        - analytics
      responses:
        "200":
          description: Found data
  /analytics/days-on-market/{id}:
    get:
      tags:
        - analytics
      responses:
        "200":
          description: Found data
  /analytics/list-sale-ratio/{id}:
    get:
      tags:
        - analytics
      responses:
        "200":
          description: Found data
  /analytics/time-to-close/{id}:
    get:
      tags:
        - analytics
      responses:
        "200":
          description: Found data
  # contacts paths
  /dashboard/contacts:
    get:
      tags:
        - contacts
      responses:
        "200":
          description: OK
  /contacts:
    get:
      tags:
        - contacts
      responses:
        "200":
          description: OK
    post:
      tags:
        - contacts
      responses:
        "200":
          description: OK
  /contacts/search:
    get:
      tags:
        - contacts
      responses:
        "200":
          description: OK
  /contacts/{contactID}:
    get:
      tags:
        - contacts
      responses:
        "200":
          description: OK
    patch:
      tags:
        - contacts
      responses:
        "200":
          description: OK
    delete:
      tags:
        - contacts
      responses:
        "200":
          description: OK
  # listings paths
  /dashboard/listings:
    get:
      tags:
        - listings
      responses:
        "200":
          description: OK
  /listings:
    get:
      tags:
        - listings
      responses:
        "200":
          description: OK
    post:
      tags:
        - listings
      responses:
        "200":
          description: OK
  /listings/search:
    get:
      tags:
        - listings
      responses:
        "200":
          description: OK
  /listings/contacts/{contactID}:
    get:
      tags:
        - listings
      responses:
        "200":
          description: OK
  /listings/{listingID}:
    get:
      tags:
        - listings
      responses:
        "200":
          description: OK
    patch:
      tags:
        - listings
      responses:
        "200":
          description: OK
    delete:
      tags:
        - listings
      responses:
        "200":
          description: OK
  /listings/{listingID}/sold/{contactID}:
    post:
      tags:
        - listings
      responses:
        "200":
          description: OK
  /listings/{listingID}/lead/{contactID}:
    post:
      tags:
        - listings
      responses:
        "200":
          description: OK
    delete:
      tags:
        - listings
      responses:
        "200":
          description: OK
  # tasks paths
  /dashboard/tasks:
    get:
      tags:
        - tasks
      responses:
        "200":
          description: OK
  /tasks:
    get:
      tags:
        - tasks
      responses:
        "200":
          description: OK
    post:
      tags:
        - tasks
      responses:
        "200":
          description: OK
  /tasks/search:
    get:
      tags:
        - tasks
      responses:
        "200":
          description: OK
  /tasks/{taskID}:
    get:
      tags:
        - tasks
      responses:
        "200":
          description: OK
    patch:
      tags:
        - tasks
      responses:
        "200":
          description: OK
    delete:
      tags:
        - tasks
      responses:
        "200":
          description: OK
  /tasks/listings/{listingID}:
    get:
      tags:
        - tasks
      responses:
        "200":
          description: OK
  /tasks/contacts/{contactID}:
    get:
      tags:
        - tasks
      responses:
        "200":
          description: OK

components:
  securitySchemes:
    csrfProtection:
      type: apiKey
      in: header
      name: x-propel-csrf
    # ref: https://swagger.io/docs/specification/authentication/cookie-authentication/
    cookiePreAuth:
      type: apiKey
      in: cookie
      name: pre-auth-session
    cookieIdleAuth:
      type: apiKey
      in: cookie
      name: idle-propel-session
    cookieAbsoluteAuth:
      type: apiKey
      in: cookie
      name: absolute-propel-session
  schemas:
    SignUp:
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
    SignIn:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    UpdateFromRecovery:
      type: object
      properties:
        password:
          type: string
          format: password
    Recovery:
      type: object
      properties:
        email:
          type: string
    SalesVolume:
      type: object
      properties:
        year:
          type: string
          format: date
        total:
          type: number
        average:
          type: number
